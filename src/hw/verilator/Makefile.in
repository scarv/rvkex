# Copyright (C) 2021 SCARV project <info@scarv.org>
#
# Use of this source code is restricted per the MIT license, a copy of which 
# can be found at https://opensource.org/licenses/MIT (or should be included 
# as LICENSE.txt within the associated archive or repository).

#--------------------------------------------------------------------
# Sources
#--------------------------------------------------------------------
include ${REPO_HOME}/src/hw/rtl/$(ALG)/$(ARCH)/Makefile.in
include ${REPO_HOME}/src/hw/rtl/rvzbk/$(ARCH)/Makefile.in

#--------------------------------------------------------------------
# Build emulator
#--------------------------------------------------------------------
ROCKET = freechips.rocketchip.system
EMULATORMODEL = SCARVRocketTest 
COP_CONF64 = SCARVRocketCoPConf64
COP_CONF32 = SCARVRocketCoPConf32

XALU_CONF32 = SCARVRocketXALUConf32
XALU_CONF64 = SCARVRocketXALUConf64

export EMULATOR = ${REPO_HOME}/work/$(ALG)_$(ISE)_emulator$(subst rv,,$(ARCH))

# Notes: building emulator requires RISCV tool supporting the fesvr package
#        building RISCV gnu-gcc toolchain for 64 bit rocketchip requires option: --with-cmodel=medany

emulator : $(EMULATOR)

${REPO_HOME}/work/$(ALG)_cop_emulator64 : $(rtl64_src) $(zbk_rtl) $(ROCKETCHIP_REPO)/bootrom/bootrom.img
	cp -f ${REPO_HOME}/src/hw/verilator/bootrom/bootrom.img          $(ROCKETCHIP_REPO)/bootrom/bootrom.img
	$(MAKE) -C $(ROCKETCHIP_REPO)/emulator CONFIG=$(COP_CONF64) MODEL=$(EMULATORMODEL)  ISE_RTL=$(RTL64) RVZBK_RTL=$(RV64ZBK) debug
	cp $(ROCKETCHIP_REPO)/emulator/emulator-$(ROCKET)-$(COP_CONF64)-debug  $@

${REPO_HOME}/work/$(ALG)_cop_emulator32 : $(rtl32_src) $(zbk_rtl) $(ROCKETCHIP_REPO)/bootrom/bootrom.img
	cp -f ${REPO_HOME}/src/hw/verilator/bootrom/bootrom.img          $(ROCKETCHIP_REPO)/bootrom/bootrom.img
	$(MAKE) -C $(ROCKETCHIP_REPO)/emulator CONFIG=$(COP_CONF32) MODEL=$(EMULATORMODEL)  ISE_RTL=$(RTL32) RVZBK_RTL=$(RV32ZBK) debug
	cp $(ROCKETCHIP_REPO)/emulator/emulator-$(ROCKET)-$(COP_CONF32)-debug  $@

${REPO_HOME}/work/$(ALG)_xalu_emulator32 : $(rtl32_src) $(zbk_rtl) $(ROCKETCHIP_REPO)/bootrom/bootrom.img
	cp -f ${REPO_HOME}/src/hw/verilator/bootrom/bootrom.img          $(ROCKETCHIP_REPO)/bootrom/bootrom.img
	$(MAKE) -C $(ROCKETCHIP_REPO)/emulator CONFIG=$(XALU_CONF32) MODEL=$(EMULATORMODEL) ISE_RTL=$(RTL32) RVZBK_RTL=$(RV32ZBK)
	cp $(ROCKETCHIP_REPO)/emulator/emulator-$(ROCKET)-$(XALU_CONF32)  $@

${REPO_HOME}/work/$(ALG)_xalu_emulator64 : $(rtl64_src) $(zbk_rtl) $(ROCKETCHIP_REPO)/bootrom/bootrom.img
	cp -f ${REPO_HOME}/src/hw/verilator/bootrom/bootrom.img          $(ROCKETCHIP_REPO)/bootrom/bootrom.img
	$(MAKE) -C $(ROCKETCHIP_REPO)/emulator CONFIG=$(XALU_CONF64) MODEL=$(EMULATORMODEL) ISE_RTL=$(RTL64) RVZBK_RTL=$(RV64ZBK) debug
	cp $(ROCKETCHIP_REPO)/emulator/emulator-$(ROCKET)-$(XALU_CONF64)-debug  $@

  
#--------------------------------------------------------------------
# Build software
#--------------------------------------------------------------------
include ${REPO_HOME}/src/hw/verilator/EMU_SWCONF.in
export EMU_SWCONF ?= ${EMU_DEF_CONF}

export EMU_HAL  = ${REPO_HOME}/src/hw/verilator/hal

export ISETEST_INCLUDES ?=

export ISETEST_SOURCES  = $(wildcard $(addsuffix /*.c,   ${ISETEST_INCLUDES}))
export ISETEST_SOURCES += $(wildcard $(addsuffix /*.cpp, ${ISETEST_INCLUDES}))
export ISETEST_SOURCES += $(wildcard $(addsuffix /*.s,   ${ISETEST_INCLUDES}))
export ISETEST_SOURCES += $(wildcard $(addsuffix /*.S,   ${ISETEST_INCLUDES}))
export ISETEST_HEADERS  = $(wildcard $(addsuffix /*.h,   ${ISETEST_INCLUDES}))


export EMU_INCLUDES := ${EMU_HAL} ${REPO_HOME}/work/emulate/${ALG} ${ISETEST_INCLUDES} 
export EMU_SOURCES  := ${ISETEST_SOURCES}  $(wildcard $(addsuffix /*.c, ${EMU_HAL})) $(wildcard $(addsuffix /*.S, ${EMU_HAL}))
export EMU_HEADERS  := ${ISETEST_HEADERS}  $(wildcard $(addsuffix /*.h, ${EMU_HAL}))

MABI       = $(findstring i,$(ARCH:rv32=i))lp$(ARCH:rv%=%)
EMU_GCC_FLAGS  = -march=$(ARCH)imac -mabi=$(MABI)  -DPREALLOCATE=1 -mcmodel=medany
EMU_GCC_FLAGS += -fno-builtin-printf -static -nostartfiles -T$(EMU_HAL)/test.ld
GCC_PREFIX = ${RISCV_ROCKET}/bin/riscv64-unknown-elf

export EMU_TARGET = ${REPO_HOME}/work/emulate/${ALG}/${ARCH}_${ISE}
# -----------------------------------------------------------------------------

${EMU_TARGET}.elf : ${EMU_SOURCES} ${EMU_HEADERS}
	${GCC_PREFIX}-gcc ${EMU_SWCONF} ${EMU_GCC_FLAGS} ${GCC_PATHS} $(addprefix -I ,${EMU_INCLUDES}) -std='gnu99' -O2 -o ${@} $(filter %.c, ${^}) $(filter %.S, ${^}) ${GCC_LIBS}

${EMU_TARGET}.asm : ${EMU_TARGET}.elf
	${GCC_PREFIX}-objdump --disassemble-all ${<} > ${@}

emulate: ${EMULATOR} ${EMU_TARGET}.elf ${EMU_TARGET}.asm
	${EMULATOR} -c -m 71100000 ${EMU_TARGET}.elf 
emulate-debug : ${EMULATOR} ${EMU_TARGET}.elf
	${EMULATOR} -c -x 500000 -v ${REPO_HOME}/work/emu32_eval.vcd -m 2100000 ${EMU_TARGET}.elf

#include ${REPO_HOME}/src/hw/verilator/verify/$(ARCH)/Makefile.in
include ${REPO_HOME}/src/hw/verilator/verify-ise/$(ARCH)/Makefile.in

emu-clean : 
	@rm --force ${EMU_TARGET}.elf
	@rm --force ${EMU_TARGET}.asm

# =============================================================================
