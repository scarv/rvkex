diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..780072ba 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ rvkex
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- rvkex
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..6c471eac 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,36 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ rvkex
+#define MATCH_SRAADD   0x8000105B
+#define  MASK_SRAADD   0x8000707F
+#define MATCH_MACC51LO 0x0000005B
+#define  MASK_MACC51LO 0x0600707F
+#define MATCH_MACC51HI 0x0200005B
+#define  MASK_MACC51HI 0x0600707F
+#define MATCH_MACC56LO 0x0400005B
+#define  MASK_MACC56LO 0x0600707F
+#define MATCH_MACC56HI 0x0600005B
+#define  MASK_MACC56HI 0x0600707F
+#define MATCH_MACCLO   0x0000007B
+#define  MASK_MACCLO   0x0600707F
+#define MATCH_MACCHI   0x0200007B
+#define  MASK_MACCHI   0x0600707F
+#define MATCH_SIKE_ADD_P434X2_SUB56 0x0000205B
+#define  MASK_SIKE_ADD_P434X2_SUB56 0xF000707F
+#define MATCH_SIKE_ADD_P434X4_SUB56 0x1000205B
+#define  MASK_SIKE_ADD_P434X4_SUB56 0xF000707F
+#define MATCH_SIKE_SUB_P434X2_ADD56 0x2000205B
+#define  MASK_SIKE_SUB_P434X2_ADD56 0xF000707F
+#define MATCH_SIKE_AND_P434X2_ADD56 0x3000205B
+#define  MASK_SIKE_AND_P434X2_ADD56 0xF000707F
+#define MATCH_SIKE_AND_P434_ADD56   0x4000205B
+#define  MASK_SIKE_AND_P434_ADD56   0xF000707F
+#define MATCH_SIKE_AND_P434X2_ADD64 0x3000207B
+#define  MASK_SIKE_AND_P434X2_ADD64 0xF000707F
+#define MATCH_SIKE_AND_P434_ADD64   0x4000207B
+#define  MASK_SIKE_AND_P434_ADD64   0xF000707F
+// -- rvkex
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3122,22 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ rvkex
+DECLARE_INSN(sraadd, MATCH_SRAADD, MASK_SRAADD)
+DECLARE_INSN(macc51lo, MATCH_MACC51LO, MASK_MACC51LO)
+DECLARE_INSN(macc51hi, MATCH_MACC51HI, MASK_MACC51HI)
+DECLARE_INSN(macc56lo, MATCH_MACC56LO, MASK_MACC56LO)
+DECLARE_INSN(macc56hi, MATCH_MACC56HI, MASK_MACC56HI)
+DECLARE_INSN(macclo, MATCH_MACCLO, MASK_MACCLO)
+DECLARE_INSN(macchi, MATCH_MACCHI, MASK_MACCHI)
+DECLARE_INSN(sike_add_p434x2_sub56, MATCH_SIKE_ADD_P434X2_SUB56, MASK_SIKE_ADD_P434X2_SUB56)
+DECLARE_INSN(sike_add_p434x4_sub56, MATCH_SIKE_ADD_P434X4_SUB56, MASK_SIKE_ADD_P434X4_SUB56)
+DECLARE_INSN(sike_sub_p434x2_add56, MATCH_SIKE_SUB_P434X2_ADD56, MASK_SIKE_SUB_P434X2_ADD56)
+DECLARE_INSN(sike_and_p434x2_add56, MATCH_SIKE_AND_P434X2_ADD56, MASK_SIKE_AND_P434X2_ADD56)
+DECLARE_INSN(sike_and_p434_add56,   MATCH_SIKE_AND_P434_ADD56,   MASK_SIKE_AND_P434_ADD56)
+DECLARE_INSN(sike_and_p434x2_add64, MATCH_SIKE_AND_P434X2_ADD64, MASK_SIKE_AND_P434X2_ADD64)
+DECLARE_INSN(sike_and_p434_add64,   MATCH_SIKE_AND_P434_ADD64,   MASK_SIKE_AND_P434_ADD64)
+// -- rvkex
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/macc51hi.h b/riscv/insns/macc51hi.h
new file mode 100644
index 00000000..78f2e182
--- /dev/null
+++ b/riscv/insns/macc51hi.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+
+  uint64_t r = (((uint128_t)a * b) >> 51) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/insns/macc51lo.h b/riscv/insns/macc51lo.h
new file mode 100644
index 00000000..fdc7628b
--- /dev/null
+++ b/riscv/insns/macc51lo.h
@@ -0,0 +1,10 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+  uint64_t m = ((uint64_t)1 << 51) - 1;
+
+  uint64_t r = ((a * b) & m) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/insns/macc56hi.h b/riscv/insns/macc56hi.h
new file mode 100644
index 00000000..d09ec1bc
--- /dev/null
+++ b/riscv/insns/macc56hi.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+
+  uint64_t r = (((uint128_t)a * b) >> 56) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/insns/macc56lo.h b/riscv/insns/macc56lo.h
new file mode 100644
index 00000000..305003ea
--- /dev/null
+++ b/riscv/insns/macc56lo.h
@@ -0,0 +1,10 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+  uint64_t m = ((uint64_t)1 << 56) - 1;
+
+  uint64_t r = ((a * b) & m) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/insns/macchi.h b/riscv/insns/macchi.h
new file mode 100644
index 00000000..ff2a70bb
--- /dev/null
+++ b/riscv/insns/macchi.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+
+  uint64_t r = (((uint128_t)a * b) >> 64) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/insns/macclo.h b/riscv/insns/macclo.h
new file mode 100644
index 00000000..126985b8
--- /dev/null
+++ b/riscv/insns/macclo.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+
+  uint64_t r = (a * b) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/insns/sike_add_p434x2_sub56.h b/riscv/insns/sike_add_p434x2_sub56.h
new file mode 100644
index 00000000..991abe79
--- /dev/null
+++ b/riscv/insns/sike_add_p434x2_sub56.h
@@ -0,0 +1,31 @@
+if(xlen == 64) {
+  uint64_t x   = READ_REG(insn.rs1());
+  uint64_t y   = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x7;
+
+  uint64_t r;
+
+  if      ( imm == 0 ) {
+    r = x + 0xFFFFFFFFFFFFFE - y;
+  }
+  else if ( imm == 1 | imm == 2 ) {
+    r = x + 0xFFFFFFFFFFFFFF - y;
+  }
+  else if ( imm == 3) {
+    r = x + 0xC5FFFFFFFFFFFF - y;
+  }
+  else if ( imm == 4) {
+    r = x + 0xB15D47FB82ECF5 - y;
+  }
+  else if ( imm == 5) {
+    r = x + 0x40ACF78CB8F062 - y;
+  }
+  else if ( imm == 6) {
+    r = x + 0x88D9F8BFAD038A - y;
+  }
+  else if ( imm == 7) {
+    r = x + 0x0004683E4E2EE6 - y;
+  }  
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/sike_add_p434x4_sub56.h b/riscv/insns/sike_add_p434x4_sub56.h
new file mode 100644
index 00000000..9761876a
--- /dev/null
+++ b/riscv/insns/sike_add_p434x4_sub56.h
@@ -0,0 +1,31 @@
+if(xlen == 64) {
+  uint64_t x   = READ_REG(insn.rs1());
+  uint64_t y   = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x7;
+
+  uint64_t r;
+
+  if      ( imm == 0 ) {
+    r = x + 0xFFFFFFFFFFFFFC - y;
+  }
+  else if ( imm == 1 || imm == 2 ) {
+    r = x + 0xFFFFFFFFFFFFFF - y;
+  }
+  else if ( imm == 3) {
+    r = x + 0x8BFFFFFFFFFFFF - y;
+  }
+  else if ( imm == 4) {
+    r = x + 0x62BA8FF705D9EB - y;
+  }
+  else if ( imm == 5) {
+    r = x + 0x8159EF1971E0C5 - y;
+  }
+  else if ( imm == 6) {
+    r = x + 0x11B3F17F5A0714 - y;
+  }
+  else if ( imm == 7) {
+    r = x + 0x0008D07C9C5DCD - y;
+  }  
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/sike_and_p434_add56.h b/riscv/insns/sike_and_p434_add56.h
new file mode 100644
index 00000000..ecf77df7
--- /dev/null
+++ b/riscv/insns/sike_and_p434_add56.h
@@ -0,0 +1,28 @@
+if(xlen == 64) {
+  uint64_t x   = READ_REG(insn.rs1());
+  uint64_t y   = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x7;
+
+  uint64_t r;
+
+  if      ( imm == 0 || imm == 1 || imm == 2 ) {
+    r = ( x & 0xFFFFFFFFFFFFFF ) + y;
+  }
+  else if ( imm == 3) {
+    r = ( x & 0xE2FFFFFFFFFFFF ) + y;
+  }
+  else if ( imm == 4) {
+    r = ( x & 0x58AEA3FDC1767A ) + y;
+  }
+  else if ( imm == 5) {
+    r = ( x & 0x20567BC65C7831 ) + y;
+  }
+  else if ( imm == 6) {
+    r = ( x & 0x446CFC5FD681C5 ) + y;
+  }
+  else if ( imm == 7) {
+    r = ( x & 0x0002341F271773 ) + y;
+  }
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/sike_and_p434_add64.h b/riscv/insns/sike_and_p434_add64.h
new file mode 100644
index 00000000..6c42f080
--- /dev/null
+++ b/riscv/insns/sike_and_p434_add64.h
@@ -0,0 +1,25 @@
+if(xlen == 64) {
+  uint64_t x   = READ_REG(insn.rs1());
+  uint64_t y   = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x7;
+
+  uint64_t r;
+
+  if      ( imm == 0 || imm == 1 || imm == 2 ) {
+    r = ( x & 0xFFFFFFFFFFFFFFFF ) + y;
+  }
+  else if ( imm == 3) {
+    r = ( x & 0xFDC1767AE2FFFFFF ) + y;
+  }
+  else if ( imm == 4) {
+    r = ( x & 0x7BC65C783158AEA3 ) + y;
+  }
+  else if ( imm == 5) {
+    r = ( x & 0x6CFC5FD681C52056 ) + y;
+  }
+  else if ( imm == 6) {
+    r = ( x & 0x0002341F27177344 ) + y;
+  }
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/sike_and_p434x2_add56.h b/riscv/insns/sike_and_p434x2_add56.h
new file mode 100644
index 00000000..b9f4543e
--- /dev/null
+++ b/riscv/insns/sike_and_p434x2_add56.h
@@ -0,0 +1,31 @@
+if(xlen == 64) {
+  uint64_t x   = READ_REG(insn.rs1());
+  uint64_t y   = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x7;
+
+  uint64_t r;
+
+  if      ( imm == 0 ) {
+    r = ( x & 0xFFFFFFFFFFFFFE ) + y;
+  }
+  else if ( imm == 1 || imm == 2 ) {
+    r = ( x & 0xFFFFFFFFFFFFFF ) + y;
+  }
+  else if ( imm == 3) {
+    r = ( x & 0xC5FFFFFFFFFFFF ) + y; 
+  }
+  else if ( imm == 4) {
+    r = ( x & 0xB15D47FB82ECF5 ) + y;
+  }
+  else if ( imm == 5) {
+    r = ( x & 0x40ACF78CB8F062 ) + y;
+  }
+  else if ( imm == 6) {
+    r = ( x & 0x88D9F8BFAD038A ) + y;
+  }
+  else if ( imm == 7) {
+    r = ( x & 0x0004683E4E2EE6 ) + y;
+  }
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/sike_and_p434x2_add64.h b/riscv/insns/sike_and_p434x2_add64.h
new file mode 100644
index 00000000..866f46e4
--- /dev/null
+++ b/riscv/insns/sike_and_p434x2_add64.h
@@ -0,0 +1,28 @@
+if(xlen == 64) {
+  uint64_t x   = READ_REG(insn.rs1());
+  uint64_t y   = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x7;
+
+  uint64_t r;
+
+  if      ( imm == 0 ) {
+    r = ( x & 0xFFFFFFFFFFFFFFFE ) + y;
+  }
+  else if ( imm == 1 || imm == 2 ) {
+    r = ( x & 0xFFFFFFFFFFFFFFFF ) + y;
+  }
+  else if ( imm == 3) {
+    r = ( x & 0xFB82ECF5C5FFFFFF ) + y;
+  }
+  else if ( imm == 4) {
+    r = ( x & 0xF78CB8F062B15D47 ) + y;
+  }
+  else if ( imm == 5) {
+    r = ( x & 0xD9F8BFAD038A40AC ) + y;
+  }
+  else if ( imm == 6) {
+    r = ( x & 0x0004683E4E2EE688 ) + y;
+  }
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/sike_sub_p434x2_add56.h b/riscv/insns/sike_sub_p434x2_add56.h
new file mode 100644
index 00000000..95336f99
--- /dev/null
+++ b/riscv/insns/sike_sub_p434x2_add56.h
@@ -0,0 +1,31 @@
+if(xlen == 64) {
+  uint64_t x   = READ_REG(insn.rs1());
+  uint64_t y   = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x7;
+
+  uint64_t r;
+
+  if      ( imm == 0 ) {
+    r = x - 0xFFFFFFFFFFFFFE + y;
+  }
+  else if ( imm == 1 || imm == 2 ) {
+    r = x - 0xFFFFFFFFFFFFFF + y;
+  }
+  else if ( imm == 3) {
+    r = x - 0xC5FFFFFFFFFFFF + y;
+  }
+  else if ( imm == 4) {
+    r = x - 0xB15D47FB82ECF5 + y;
+  }
+  else if ( imm == 5) {
+    r = x - 0x40ACF78CB8F062 + y;
+  }
+  else if ( imm == 6) {
+    r = x - 0x88D9F8BFAD038A + y;
+  }
+  else if ( imm == 7) {
+    r = x - 0x0004683E4E2EE6 + y;
+  }  
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/sraadd.h b/riscv/insns/sraadd.h
new file mode 100644
index 00000000..77a686cd
--- /dev/null
+++ b/riscv/insns/sraadd.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  int64_t a = READ_REG(insn.rs1());
+  int64_t b = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x3F;
+
+  int64_t r = a + (b >> imm);
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..76b88079 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -1273,6 +1273,24 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ rvkex
+riscv_insn_rvkex = \
+	sraadd \
+	macc51lo \
+	macc51hi \
+	macc56lo \
+	macc56hi \
+	macclo \
+	macchi \
+	sike_add_p434x2_sub56 \
+	sike_add_p434x4_sub56 \
+	sike_sub_p434x2_add56 \
+	sike_and_p434x2_add56 \
+	sike_and_p434_add56 \
+	sike_and_p434x2_add64 \
+	sike_and_p434_add64  
+# -- rvkex
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1307,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_rvkex) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
