diff --git a/riscv/decode.h b/riscv/decode.h
index 7028c855..780072ba 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -80,6 +80,10 @@ public:
   insn_t(insn_bits_t bits) : b(bits) {}
   insn_bits_t bits() { return b & ~((UINT64_MAX) << (length() * 8)); }
   int length() { return insn_length(b); }
+  // ++ rvkex
+  uint64_t funct7() { return x(25, 7); }
+  uint64_t funct3() { return x(12, 3); }
+  // -- rvkex
   int64_t i_imm() { return int64_t(b) >> 20; }
   int64_t shamt() { return x(20, 6); }
   int64_t s_imm() { return x(7, 5) + (xs(25, 7) << 5); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index b2162963..72088483 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -281,6 +281,44 @@
 /* Automatically generated by parse_opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ++ rvkex
+#define MATCH_VMACC51LO_VV 0x0000202B
+#define  MASK_VMACC51LO_VV 0xFE00707F
+#define MATCH_VMACC51HI_VV 0x0400202B
+#define  MASK_VMACC51HI_VV 0xFE00707F
+#define MATCH_VMUL51LO_VV  0x0800202B
+#define  MASK_VMUL51LO_VV  0xFE00707F
+#define MATCH_VMUL51HI_VV  0x0C00202B
+#define  MASK_VMUL51HI_VV  0xFE00707F
+#define MATCH_VSRL51ADD_VV 0x0000102B
+#define  MASK_VSRL51ADD_VV 0xFE00707F
+#define MATCH_VPERMUTE_VV  0x0000002B
+#define  MASK_VPERMUTE_VV  0xFE00707F
+#define MATCH_VMVIDX1_S_X  0x0400002B
+#define  MASK_VMVIDX1_S_X  0xFE00707F
+// ---
+#define MATCH_VMACCLO_VVI  0x0000200B
+#define  MASK_VMACCLO_VVI  0x0200707F
+#define MATCH_VMACCHI_VVI  0x0000300B
+#define  MASK_VMACCHI_VVI  0x0200707F
+#define MATCH_VMULLO_VVI   0x0000400B
+#define  MASK_VMULLO_VVI   0x0200707F
+#define MATCH_VMULHI_VVI   0x0000500B
+#define  MASK_VMULHI_VVI   0x0200707F
+// ---
+#define MATCH_MACC51LO 0x0000005B
+#define  MASK_MACC51LO 0x0600707F
+#define MATCH_MACC51HI 0x0200005B
+#define  MASK_MACC51HI 0x0600707F
+#define MATCH_SRLADD   0x0000105B
+#define  MASK_SRLADD   0x8000707F
+#define MATCH_MACC56LO 0x0400005B
+#define  MASK_MACC56LO 0x0600707F
+#define MATCH_MACC56HI 0x0600005B
+#define  MASK_MACC56HI 0x0600707F
+#define MATCH_SRAADD   0x8000105B
+#define  MASK_SRAADD   0x8000707F
+// -- rvkex
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -3092,6 +3130,27 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// ++ rvkex
+DECLARE_INSN(vmacc51lo_vv, MATCH_VMACC51LO_VV, MASK_VMACC51LO_VV)
+DECLARE_INSN(vmacc51hi_vv, MATCH_VMACC51HI_VV, MASK_VMACC51HI_VV)
+DECLARE_INSN(vmul51lo_vv, MATCH_VMUL51LO_VV, MASK_VMUL51LO_VV)
+DECLARE_INSN(vmul51hi_vv, MATCH_VMUL51HI_VV, MASK_VMUL51HI_VV)
+DECLARE_INSN(vsrl51add_vv, MATCH_VSRL51ADD_VV, MASK_VSRL51ADD_VV)
+DECLARE_INSN(vpermute_vv, MATCH_VPERMUTE_VV, MASK_VPERMUTE_VV)
+DECLARE_INSN(vmvidx1_s_x, MATCH_VMVIDX1_S_X, MASK_VMVIDX1_S_X)
+// ---
+DECLARE_INSN(vmacclo_vvi, MATCH_VMACCLO_VVI, MASK_VMACCLO_VVI)
+DECLARE_INSN(vmacchi_vvi, MATCH_VMACCHI_VVI, MASK_VMACCHI_VVI)
+DECLARE_INSN(vmullo_vvi, MATCH_VMULLO_VVI, MASK_VMULLO_VVI)
+DECLARE_INSN(vmulhi_vvi, MATCH_VMULHI_VVI, MASK_VMULHI_VVI)
+// ---
+DECLARE_INSN(macc51lo, MATCH_MACC51LO, MASK_MACC51LO)
+DECLARE_INSN(macc51hi, MATCH_MACC51HI, MASK_MACC51HI)
+DECLARE_INSN(srladd, MATCH_SRLADD, MASK_SRLADD)
+DECLARE_INSN(macc56lo, MATCH_MACC56LO, MASK_MACC56LO)
+DECLARE_INSN(macc56hi, MATCH_MACC56HI, MASK_MACC56HI)
+DECLARE_INSN(sraadd, MATCH_SRAADD, MASK_SRAADD)
+// -- rvkex
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/macc51hi.h b/riscv/insns/macc51hi.h
new file mode 100644
index 00000000..120d3256
--- /dev/null
+++ b/riscv/insns/macc51hi.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+
+  uint64_t r = (((uint128_t)a * b) >> 51) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/macc51lo.h b/riscv/insns/macc51lo.h
new file mode 100644
index 00000000..a6efa80e
--- /dev/null
+++ b/riscv/insns/macc51lo.h
@@ -0,0 +1,10 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+  uint64_t m = ((uint64_t)1 << 51) - 1;
+
+  uint64_t r = ((a * b) & m) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/macc56hi.h b/riscv/insns/macc56hi.h
new file mode 100644
index 00000000..793d5b15
--- /dev/null
+++ b/riscv/insns/macc56hi.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+
+  uint64_t r = (((uint128_t)a * b) >> 56) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/macc56lo.h b/riscv/insns/macc56lo.h
new file mode 100644
index 00000000..dab057ae
--- /dev/null
+++ b/riscv/insns/macc56lo.h
@@ -0,0 +1,10 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t c = READ_REG(insn.rs3());
+  uint64_t m = ((uint64_t)1 << 56) - 1;
+
+  uint64_t r = ((a * b) & m) + c;
+
+  WRITE_REG(insn.rd(), r);
+}
\ No newline at end of file
diff --git a/riscv/insns/sraadd.h b/riscv/insns/sraadd.h
new file mode 100644
index 00000000..77a686cd
--- /dev/null
+++ b/riscv/insns/sraadd.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  int64_t a = READ_REG(insn.rs1());
+  int64_t b = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x3F;
+
+  int64_t r = a + (b >> imm);
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/insns/srladd.h b/riscv/insns/srladd.h
new file mode 100644
index 00000000..010a7361
--- /dev/null
+++ b/riscv/insns/srladd.h
@@ -0,0 +1,9 @@
+if(xlen == 64) {
+  uint64_t a = READ_REG(insn.rs1());
+  uint64_t b = READ_REG(insn.rs2());
+  uint64_t imm = insn.funct7() & 0x3F;
+
+  uint64_t r = a + (b >> imm);
+
+  WRITE_REG(insn.rd(), r);
+}
diff --git a/riscv/insns/vmacc51hi_vv.h b/riscv/insns/vmacc51hi_vv.h
new file mode 100644
index 00000000..239b7188
--- /dev/null
+++ b/riscv/insns/vmacc51hi_vv.h
@@ -0,0 +1,21 @@
+// vmacc51hi.vv: vd[i] = +((vs1[i] * vs2[i]) >> 51) + vd[i]
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+
+  vd = (((uint128_t)vs2 * vs1) >> 51) + vd;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vmacc51lo_vv.h b/riscv/insns/vmacc51lo_vv.h
new file mode 100644
index 00000000..c8e8b023
--- /dev/null
+++ b/riscv/insns/vmacc51lo_vv.h
@@ -0,0 +1,22 @@
+// vmacc51lo.vv: vd[i] = +((vs1[i] * vs2[i]) & ((1<<51)-1)) + vd[i]
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+  uint64_t  mask51 = ((uint64_t)1 << 51) - 1;
+
+  vd = ((vs1 * vs2) & mask51) + vd;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vmacchi_vvi.h b/riscv/insns/vmacchi_vvi.h
new file mode 100644
index 00000000..e2660e60
--- /dev/null
+++ b/riscv/insns/vmacchi_vvi.h
@@ -0,0 +1,24 @@
+// vmacchi.vv: vd[i] = +((vs1[i] * vs2[i]) >> imm) + vd[i]
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+uint64_t width = insn.funct7() >> 1;
+
+require(width <= e64);
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+
+  vd = (((uint128_t)vs2 * vs1) >> width) + vd;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vmacclo_vvi.h b/riscv/insns/vmacclo_vvi.h
new file mode 100644
index 00000000..05c2e2cb
--- /dev/null
+++ b/riscv/insns/vmacclo_vvi.h
@@ -0,0 +1,25 @@
+// vmacclo.vvi: vd[i] = +((vs1[i] * vs2[i]) & ((1<<imm)-1)) + vd[i]
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+uint64_t width = insn.funct7() >> 1;
+
+require(width <= e64);
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+  uint64_t  mask = ((uint64_t)1 << width) - 1;
+
+  vd = ((vs1 * vs2) & mask) + vd;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vmul51hi_vv.h b/riscv/insns/vmul51hi_vv.h
new file mode 100644
index 00000000..69ff21a3
--- /dev/null
+++ b/riscv/insns/vmul51hi_vv.h
@@ -0,0 +1,21 @@
+// vmul51hi.vv: vd[i] = (vs1[i] * vs2[i]) >> 51
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+
+  vd = ((uint128_t)vs2 * vs1) >> 51;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vmul51lo_vv.h b/riscv/insns/vmul51lo_vv.h
new file mode 100644
index 00000000..1754cfa2
--- /dev/null
+++ b/riscv/insns/vmul51lo_vv.h
@@ -0,0 +1,22 @@
+// vmul51lo.vv: vd[i] = (vs1[i] * vs2[i]) & ((1<<51)-1)
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+  uint64_t  mask51 = ((uint64_t)1 << 51) - 1;;
+
+  vd = (vs1 * vs2) & mask51;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vmulhi_vvi.h b/riscv/insns/vmulhi_vvi.h
new file mode 100644
index 00000000..69c5e3fc
--- /dev/null
+++ b/riscv/insns/vmulhi_vvi.h
@@ -0,0 +1,24 @@
+// vmulhi.vv: vd[i] = (vs1[i] * vs2[i]) >> imm
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+uint64_t width = insn.funct7() >> 1;
+
+require(width <= e64);
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+
+  vd = ((uint128_t)vs2 * vs1) >> width;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vmullo_vvi.h b/riscv/insns/vmullo_vvi.h
new file mode 100644
index 00000000..e3323221
--- /dev/null
+++ b/riscv/insns/vmullo_vvi.h
@@ -0,0 +1,25 @@
+// vmullo.vvi: vd[i] = (vs1[i] * vs2[i]) & ((1<<imm)-1)
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+uint64_t width = insn.funct7() >> 1;
+
+require(width <= e64);
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+  uint64_t  mask = ((uint64_t)1 << width) - 1;
+
+  vd = (vs1 * vs2) & mask;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vmvidx1_s_x.h b/riscv/insns/vmvidx1_s_x.h
new file mode 100644
index 00000000..2134a3be
--- /dev/null
+++ b/riscv/insns/vmvidx1_s_x.h
@@ -0,0 +1,31 @@
+// vmvidx1_x_s: vd[1] = rs1
+
+require_vector(true);
+// require(insn.v_vm() == 1);
+require(P.VU.vsew >= e8 && P.VU.vsew <= e64);
+reg_t vl = P.VU.vl->read();
+
+// vl must >= 2 otherwise there is no vd[1]
+if (vl >= 2 && P.VU.vstart->read() < vl) {
+  reg_t rd_num = insn.rd();
+  reg_t sew = P.VU.vsew;
+
+  switch(sew) {
+  case e8:
+    P.VU.elt<uint8_t>(rd_num, 1, true) = READ_REG(insn.rs1());
+    break;
+  case e16:
+    P.VU.elt<uint16_t>(rd_num, 1, true) = READ_REG(insn.rs1());
+    break;
+  case e32:
+    P.VU.elt<uint32_t>(rd_num, 1, true) = READ_REG(insn.rs1());
+    break;
+  default:
+    P.VU.elt<uint64_t>(rd_num, 1, true) = READ_REG(insn.rs1());
+    break;
+  }
+
+  vl = 0;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vpermute_vv.h b/riscv/insns/vpermute_vv.h
new file mode 100644
index 00000000..2cbc92a9
--- /dev/null
+++ b/riscv/insns/vpermute_vv.h
@@ -0,0 +1,29 @@
+// vpermute.vv vd, vs2, vs1 
+// currently only for sew = 64
+
+require_vector(true);
+
+require_align(insn.rd(), P.VU.vflmul);
+require_align(insn.rs2(), P.VU.vflmul);
+require_align(insn.rs1(), P.VU.vflmul);
+require(insn.rd() != insn.rs2() && insn.rd() != insn.rs1());
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+reg_t lane_num = P.VU.VLEN/P.VU.ELEN;
+reg_t mask = lane_num - 1;
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  rmd = i & mask;
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs2_num, rmd);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs1_num, vs1 + i-rmd);
+
+  vd = vs1 >= P.VU.vlmax ? 0 : vs2;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/insns/vsrl51add_vv.h b/riscv/insns/vsrl51add_vv.h
new file mode 100644
index 00000000..4e0afb72
--- /dev/null
+++ b/riscv/insns/vsrl51add_vv.h
@@ -0,0 +1,21 @@
+// vsrl51add.vv: vd[i] = (vs1[i] >> 51) + vs2[i]
+
+require_vector(true);
+require(P.VU.vsew == e64);
+
+reg_t rd_num  = insn.rd();
+reg_t rs1_num = insn.rs1();
+reg_t rs2_num = insn.rs2();
+reg_t vl = P.VU.vl->read();
+
+for (reg_t i = P.VU.vstart->read(); i < vl; i++) {
+  uint64_t  vd  = P.VU.elt<uint64_t>(rd_num,  i);
+  uint64_t  vs1 = P.VU.elt<uint64_t>(rs1_num, i);
+  uint64_t  vs2 = P.VU.elt<uint64_t>(rs2_num, i);
+
+  vd = (vs1 >> 51) + vs2;
+
+  P.VU.elt<uint64_t>(rd_num, i, true) = vd;
+}
+
+P.VU.vstart->write(0);
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 9a6b118d..abd126c2 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -1273,6 +1273,27 @@ riscv_insn_svinval = \
 	hinval_vvma \
 	hinval_gvma \
 
+# ++ rvkex
+riscv_insn_rvkex = \
+	vmacc51lo_vv \
+	vmacc51hi_vv \
+	vmul51lo_vv \
+	vmul51hi_vv \
+	vsrl51add_vv \
+	vpermute_vv \
+	vmvidx1_s_x \
+	vmacclo_vvi \
+	vmacchi_vvi \
+	vmullo_vvi \
+	vmulhi_vvi \
+	macc51lo \
+	macc51hi \
+	srladd \
+	macc56lo \
+	macc56hi \
+	sraadd    
+# -- rvkex
+
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
 	$(riscv_insn_ext_c) \
@@ -1289,6 +1310,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_p) \
 	$(riscv_insn_priv) \
 	$(riscv_insn_svinval) \
+	$(riscv_insn_rvkex) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
